1235. Maximum Profit in Job Scheduling

```
class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        # order by endTime
        temp = sorted(enumerate(endTime), key = lambda x:x[1])
        order = [i[0] for i in temp]

        pt = [0]
        res = [0]
        
        def inst(x):
            a,b = 0,len(pt)-1
            while a<b:
                temp = (a+b+1)//2
                if pt[temp]>x:
                    b = temp-1
                else:
                    a = temp
            return(a)
        
        for i in order:
            cur = max(res[-1], res[inst(startTime[i])] + profit[i])
            pt.append(endTime[i])
            res.append(cur)
            
        return(res[-1])
```

Lee's code
``` 
    def jobScheduling(self, startTime, endTime, profit):
        jobs = sorted(zip(startTime, endTime, profit), key=lambda v: v[1])
        dp = [[0, 0]]
        for s, e, p in jobs:
            i = bisect.bisect(dp, [s + 1]) - 1
            if dp[i][1] + p > dp[-1][1]:
                dp.append([e, dp[i][1] + p])
        return dp[-1][1]
```
His version saves memory.
If dp[[endtime],[profit]] comes with larger endtime but no greater profit, it's not necessary to save this stage.
