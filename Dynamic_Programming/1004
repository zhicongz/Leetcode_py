Siding window is better for this problem. DP is ETL.

```
class Solution:
    def longestOnes(self, A: List[int], K: int) -> int:
        last = [0]
        for i in range(1,len(A)+1):
            last.append(0 if A[i-1]==0 else last[-1]+1)
            
        for _ in range(K):
            res = [0]
            for i in range(1,len(last)):
                res.append(last[i-1]+1 if A[i-1]==0 else res[-1]+1)
            last = res
            
        return(max(last))
 ```       
