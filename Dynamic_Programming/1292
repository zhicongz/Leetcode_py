```{My_in_contest}
class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        m,n = len(mat), len(mat[0])
        r = min(m,n)
        
        dp = [[[0]*n for _ in range(m)] for _ in range(r+1)]
        
        cur = float("inf")
        for i in range(m):
            for j in range(n):
                dp[1][i][j] = mat[i][j]
                cur = min(cur,dp[1][i][j])
        if cur > threshold:
            return(0)
        
        
        for k in range(2,r+1):
            cur = float("inf")
            for i in range(k-1,m):
                for j in range(k-1,n):
                    dp[k][i][j] = dp[k-1][i-1][j] + dp[k-1][i][j-1] - dp[k-2][i-1][j-1] + mat[i][j] + mat[i-k+1][j-k+1]
                    cur = min(cur,dp[k][i][j])
            
            if cur > threshold:
                return(k-1)
            
        return(r)
```

I got ETL. This is not the most efficient solution as this rearch on length O(n). Binary searching could be used on prefixsum...

```{My_solution}
class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        m,n = len(mat), len(mat[0])
        
        dp = [[0]*(n+1) for _ in range(m+1)]
        
        for i in range(1,m+1):
            row_sum = 0
            for j in range(1,n+1):
                row_sum += mat[i-1][j-1]
                dp[i][j] = dp[i-1][j] + row_sum
        
        def foo(r):
            if r == 0: return 0
            res = float("Inf")
            for i in range(r,m+1):
                for j in range(r,n+1):
                    res = min(res, dp[i][j]-dp[i-r][j]-dp[i][j-r]+dp[i-r][j-r])
            return(res)
            
        lb,ub = 0,min(m,n)
        while lb < ub:
            temp = (lb + ub + 1)//2
            if foo(temp) > threshold:
                ub = temp - 1
            else:
                lb = temp
        
        return(lb)
```
