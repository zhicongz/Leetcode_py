1312. Minimum Insertion Steps to Make a String Palindrome

```
class Solution:
    def minInsertions(self, s: str) -> int:
        n = len(s)
        if n == 1:
            return 0
        
        # n>1
        dp = [[0 for _ in range(n)] for _ in range(n)]
        
        for j in range(1,n):
            for i in range(j-1,-1,-1):
                if s[i]==s[j]:
                    dp[i][j] = min(dp[i+1][j-1], 1+dp[i+1][j], 1+dp[i][j-1])
                else:
                    dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1], dp[i+1][j-1]+1)
        

        
        return dp[0][n-1]
```

Palindrome can be solved by DP from inner to outer.
