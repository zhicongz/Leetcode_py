312. Burst Balloons

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.


```
class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        nums = [1]+nums+[1]
        n = len(nums)
        @lru_cache(n**2)
        def dp(i,j):
            if j-i <= 1: return 0
            return max(dp(i,k)+dp(k,j)+nums[i]*nums[k]*nums[j] for k in range(i+1,j))
            
        return dp(0,n-1)
```

```
class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        nums = [1]+nums+[1]
        n = len(nums)
        
        dp = [[0]*n for _ in range(n)]
        
        for i in range(n-1,-1,-1):
            for j in range(n):
                if j-i <= 1: dp[i][j] = 0 
                else:
                    dp[i][j] = max(dp[i][k]+dp[k][j]+nums[i]*nums[k]*nums[j] for k in range(i+1,j))
                
        return dp[0][n-1]
```

lru_cache is TLE but dp table works.
The last bursted ballon, k, get the score k*i*j, where i,j are the left and right bounds (excluded).
