
## solution 1
```
class Solution:
    def numRollsToTarget(self, d: int, f: int, target: int) -> int:
        dp = [[0]*(target+1) for _ in range(d+1)]
        dp[0][0] = 1
        
        for i in range(1,d+1):
            for j in range(1,target+1):
                dp[i][j] = sum(dp[i-1][max(0,j-f):j])%(10**9+7)
        
        return(dp[-1][-1])
```

## solution 2
```
class Solution:
    def numRollsToTarget(self, d: int, f: int, target: int) -> int:
        dp = [1] + [0]*(target)
        
        for i in range(1,d+1):
            for j in range(target,-1,-1):
                dp[j] = sum(dp[max(0,j-f):j])%(10**9+7)
        
        return(dp[-1])
```

> No different for two solutions except the second one save in vector instead of matrix.
