1246. Palindrome Removal
```
class Solution:
    def minimumMoves(self, arr: List[int]) -> int:
        n = len(arr)
        
        # dp[i][j] cnt min moves from arr[i:(j-1)]
        dp = [[0]*(n+1) for _ in range(n+1)]
        
        # size = 1
        for i in range(n):
            dp[i][i+1] = 1
        
        # size >= 2
        for size in range(2,n+1):
            for i in range(n-size+1):
                j = i+size
                dp[i][j] = 1 + dp[i+1][j]
                if arr[i] == arr[i+1]:
                    dp[i][j] = min(dp[i][j] , 1 + dp[i+2][j])
                    
                for k in range(i+2,j):
                    if arr[i]==arr[k]:
                        inner = dp[i+1][k]
                        dp[i][j] = min(dp[i][j], inner+dp[k+1][j])

        return(dp[0][n])
```
loop was
```
        for size in range(2,n+1):
            for i in range(n-size+1):
                j = i+size
                dp[i][j] = size
                    
                for k in range(i+1,j):
                    if arr[i]==arr[k]:
                        inner = dp[i+1][k] if i+i!=k else 1
                        dp[i][j] = min(dp[i][j], inner+dp[k+1][j])
```
This solution ETL. 
```
inner = dp[i+1][k] if i+i!=k else 1
```
this take more time than put `k = i+1` as a seperate loop

