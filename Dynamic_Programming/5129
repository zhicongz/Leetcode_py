5129. Minimum Falling Path Sum II

Given a square grid of integers arr, a falling path with non-zero shifts is a choice of exactly one element from each row of arr, such that no two elements chosen in adjacent rows are in the same column.

Return the minimum sum of a falling path with non-zero shifts.

Ex:
Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.

```{My}
class Solution:
    def minFallingPathSum(self, arr: List[List[int]]) -> int:
        m,n = len(arr), len(arr[0])
        dp = [[0]*n for _ in range(m+1)]
        
        for i in range(m):
            temp = sorted(dp[i])
            for j in range(n):
                if dp[i][j] == temp[0]:
                    dp[i+1][j] = temp[1] + arr[i][j]
                else:
                    dp[i+1][j] = temp[0] + arr[i][j]
        
        return(min(dp[-1]))
```

```{Lee's}
    def minFallingPathSum(self, A):
        for i in xrange(1, len(A)):
            r = heapq.nsmallest(2, A[i - 1])
            for j in xrange(len(A[0])):
                A[i][j] += r[1] if A[i - 1][j] == r[0] else r[0]
        return min(A[-1])
```
