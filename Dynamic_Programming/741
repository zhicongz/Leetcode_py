```
class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)
        dp = [[-float("Inf")]*n for _ in range(n)]
        dp[0][0] = grid[0][0]
        for t in range(1,2*n-1):
            for i in range(min(n-1,t),max(t-n,-1),-1):
                for j in range(i,max(t-n,-1),-1):
                    if grid[i][t-i] != -1 or grid[j][t-j] != -1:
                        dp[i][j] = max(dp[i][j], dp[i-1][j-1], dp[i-1][j], dp[i][j-1])
                        if i!=j:                            
                            if grid[i][t-i] == 1:
                                dp[i][j] += 1
                            if grid[j][t-j] == 1:
                                dp[i][j] += 1
                        else:
                            if grid[i][t-i] == 1:
                                dp[i][j] += 1

        return(max(dp[-1][-1],0))
```
Really tricky question. Need to find the right way for build up `dp`.
The idea comes from the solution approch 3.
`dp[i][j]` for the t's loop is the total number of two path pick up starts from [0][0] stop at [i][t-i], [j][t-j] respectively.
Notice `dp[i][j] == dp[j][i]`, so no need to do the lower triangle calculation.
