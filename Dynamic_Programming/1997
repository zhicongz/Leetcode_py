1997. First Day Where You Have Been in All the Rooms

There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.

Initially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:

Assuming that on a day, you visit room i,
if you have been in room i an odd number of times (including the current visit), on the next day you will visit the room specified by nextVisit[i] where 0 <= nextVisit[i] <= i;
if you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.
Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.

```
class Solution:
    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:
        mod = 10**9+7
        n = len(nextVisit)
        
        dp = [0]*(n+1) ## next visit ith room from odds to even
        cum = [0]
        for i in range(n):
            #dp[i+1] = (dp[i]+1)+(..)+(dp[nextVisit[i]]+1)+1
            dp[i+1] = (cum[i]-cum[nextVisit[i]]+1)%mod
            cum.append((cum[-1]+dp[i+1]+1)%mod)
        
        #print(dp)
        
        return cum[-2]
```
Notice that: we can only visited the larger node i after visit i-1 twice
dp[i+1] is number of the days used from the odd number visit to the even number visit + 1
dp[i+1] = sum_{j = nextVisit[i]}^{i}(dp[j]) + 1
cum[i+1] is sum of dp[:i+1] for fast computing

```
class Solution:
    def firstDayBeenInAllRooms(self, A):
        n, M = len(A), 10**9 + 7
        dp = [0]*n
        for i in range(1, n):
            dp[i] = (2*dp[i-1] - dp[A[i-1]] + 2) % M

        return dp[-1]  
```
dp is the days used from day 0 to first visit i day
days spend from node j to node i (j<=i) is dp[i]-dp[j] (because visit node i from 0 must pass node j)
