1734. Decode XORed Permutation

There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].

Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.

* First do cum-XOR, find x1^x2,x1^x3...

* XOR all the numbers in previous results. Get x2^x3^.. as x1 occurs even times

* XOR 1 to n with number from last step get x1

```
class Solution:
    def decode(self, encoded: List[int]) -> List[int]:
        cur = 0
        cumxor = []
        for i in encoded:
            cur ^= i
            cumxor.append(cur)
        
        cur = 0
        for i in cumxor:
            cur ^=i
        for i in range(1,len(encoded)+2):
            cur ^=i
        
        res = [cur]
        for i in cumxor:
            res.append(cur^i)
        
        #print(cumxor)
        return res
```
