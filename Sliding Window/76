76. Minimum Window Substring

Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

```
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        target = collections.Counter(t)
        cur = collections.Counter()
        res,j = '0'*len(s),0
        for i,e in enumerate(s):
            cur[e] += 1
            if all(target[k] <= cur[k] for k in target):
                while target[s[j]] < cur[s[j]]:
                    #print(i,j,cur)
                    cur[s[j]] -= 1
                    j += 1
                if len(res)>=i-j+1:
                    res = s[j:i+1]
        
        if res == '0'*len(s):
            return ""
        else:
            return res
            
```
