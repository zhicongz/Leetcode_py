1012. Numbers With Repeated Digits

Given a positive integer N, return the number of positive integers less than or equal to N that have at least 1 repeated digit.

```
class Solution:
    def numDupDigitsAtMostN(self, N: int) -> int:
        ## find unique
        res = 0
        m = len(str(N))
        if m == 1: return 0
        
        ## include leading 0
        def helper(l,p):
            if l == 0: return 1
            else: return (10-p)*helper(l-1,p+1)
        
        ## cnt for number one digit shorter than N
        for i in range(m-1):
            res += 9*helper(i,1) 
            
        ## equal length
        seen = set()
        
        for (i,e) in enumerate(str(N)):
            e = int(e)
            if i != 0: ## not leading 
                if e == 0: 
                    if e in seen: break
                    seen.add(0)
                    continue
                for j in range(e):
                    if j not in seen: res += helper(m-i-1,1+len(seen))
            else: ## leading
                if e == 1: 
                    seen.add(1)
                    continue
                for j in range(1,e):    
                    if j not in seen: res += helper(m-i-1,1+len(seen))
            ## count on all smaller numbers on digit i, the equal case pass to the next iteration
            if e in seen: break ## if this happens, no need to pass
            seen.add(e)
            
        
        if all(i<2 for i in collections.Counter(str(N)).values()): res += 1
        
        return N-res
```
