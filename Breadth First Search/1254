···
class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        n,m = len(grid),len(grid[0])   
        if m<2 or n<2:
            return(0)
        seen = set()
        stack = []
        # change edge to 1
        for j in range(m):
            if (0,j) not in seen:
                seen.add((0,j))
                if grid[0][j] == 0:
                    stack.append((0,j))
            if (n-1,j) not in seen:
                if grid[n-1][j] == 0:
                    stack.append((n-1,j))
                    
        for i in range(n):
            if (i,0) not in seen:
                seen.add((i,0))
                if grid[i][0] == 0:
                    stack.append((i,0))
            if (i,m-1) not in seen:
                if grid[i][m-1] == 0:
                    stack.append((i,m-1))
                    
        while stack:
            (a,b) = stack.pop()
            grid[a][b] = 1
            for (x,y) in [(a+1,b),(a-1,b),(a,b+1),(a,b-1)]:
                if 0<=x<n and 0<=y<m and (x,y) not in seen:
                    seen.add((x,y))
                    if grid[x][y]==0:
                        stack.append((x,y))
                               
        
        cnt = 0

        
        for i in range(1,n-1):
            for j in range(1,m-1):
                if grid[i][j]==0 and (i,j) not in seen:
                    stack = [(i,j)]
                    while stack:
                        (a,b) = stack.pop()
                        grid[a][b] = 1
                        for (x,y) in [(a+1,b),(a-1,b),(a,b+1),(a,b-1)]:
                            if 0<=x<n and 0<=y<m and (x,y) not in seen:
                                seen.add((x,y))
                                if grid[x][y]==0:
                                    stack.append((x,y))
                    cnt += 1
        return(cnt)
                    
···
