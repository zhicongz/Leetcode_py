1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance

```
class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        dis = [[float("Inf")]*n for _ in range(n)]
        
        for edge in edges:
            dis[edge[0]][edge[1]] = edge[2]
            dis[edge[1]][edge[0]] = edge[2]
        
        for i in range(n):
            dis[i][i] = 0
            #print(dis[i])
        
        def bfs(k,cnt):
            seen = {}
            stock = [[k,0]]
            while stock:
                if len(seen) > cnt: return float("Inf")
                [temp, d] = stock.pop(0)
                if temp not in seen or d<seen[temp]:
                    seen[temp] = d
                    for i in range(n):
                        cur = d+dis[temp][i]
                        if cur <= distanceThreshold:
                            stock.append([i,cur])

                            
            #print(seen)
            return len(seen)
        
        cnt = float("Inf")
        res = -1
        for i in range(n):
            cur = bfs(i,cnt)
            if cur <= cnt:  
                res = i
                cnt = cur
                
        return res
```

Floyd-Warshall from Lee
```
        dis = [[float('inf')] * n for _ in xrange(n)]
        for i, j, w in edges:
            dis[i][j] = dis[j][i] = w
        for i in xrange(n):
            dis[i][i] = 0
        for k in xrange(n):
            for i in xrange(n):
                for j in xrange(n):
                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])
        res = {sum(d <= maxd for d in dis[i]): i for i in xrange(n)}
        return res[min(res)]

```
            
