```
class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        m,n = len(grid), len(grid[0])
        
        if m==1 and n==1:
            return(0)
        
        seen = {}
        seen = collections.defaultdict(lambda:0,seen)
        cnt = 0
        
        stack = [(0,0,0)] # (i,j,remove)      

        while stack:
            cnt += 1
            next_stack = []
            while stack:
                (i,j,remove) = stack.pop(0)
                if (i,j) not in seen or remove < seen[(i,j)]:
                    seen[(i,j)] = remove
                    for (x,y) in [(i+1,j),(i-1,j),(i,j-1),(i,j+1)]:
                        if 0<=x<m and 0<=y<n:
                            if x==m-1 and y == n-1:
                                return(cnt)
                            if grid[x][y] == 0:
                                next_stack.append((x,y,remove))
                            elif remove < k:                              
                                next_stack.append((x,y,remove+1))
            stack = next_stack
        
        return(-1)
        
```
