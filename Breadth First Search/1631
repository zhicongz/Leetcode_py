1631. Path With Minimum Effort

You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

```
class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        m,n = len(heights), len(heights[0])
        dist = [[float('Inf')]*n for _ in range(m)] ## min dist to point[i,j]
        dist[0][0] = 0
        seen = set()
        queue = [[0,0,0]] ## [dist,i,j]
        while queue:
            [d,i,j] = heapq.heappop(queue)
            if i == m-1 and j == n-1: return d
            if (i,j) not in seen:
                seen.add((i,j))
                for [x,y] in [[i+1,j],[i-1,j],[i,j+1],[i,j-1]]:
                    if 0<=x<m and 0<=y<n:
                        dist[x][y] = min(max(d,abs(heights[x][y]-heights[i][j])), dist[x][y])
                        heapq.heappush(queue, [dist[x][y],x,y])
```
Dijkstra's algorithm. BFS + heap. Everytime heappop the smallest distance of points at boundary region (queue). 
