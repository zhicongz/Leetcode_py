class Solution:
    def minimumMoves(self, grid: List[List[int]]) -> int:
        n = len(grid)
        seen = set()
        cur_p = {(0,0,0,1)}
        cnt = 0
        
        while cur_p:
            next_p = set()
            while cur_p:
                (i,j,k,l) = cur_p.pop()
                if (i,j,k,l) not in seen:
                    seen.add((i,j,k,l))
                    if j+1<n and l+1<n and grid[i][j+1] == 0 and grid[k][l+1] == 0 and (i,j+1,k,l+1) not in seen:
                        next_p.add((i,j+1,k,l+1))

                    if i+1<n and k+1<n and grid[i+1][j] == 0 and grid[k+1][l] == 0 and (i+1,j,k+1,l) not in seen:
                        next_p.add((i+1,j,k+1,l))

                    if i == k and i+1<n and grid[i+1][j] == 0 and grid[k+1][l] == 0 and (i,j,k+1,l-1) not in seen:
                        next_p.add((i,j,k+1,l-1))

                    if j == l and j+1<n and grid[i][j+1] ==0 and grid[k][l+1] == 0 and (i,j,k-1,l+1) not in seen:
                        next_p.add((i,j,k-1,l+1))
                
            cnt += 1
            if (n-1,n-2,n-1,n-1) in next_p:
                return(cnt)
            
            cur_p = next_p
            
        return -1
