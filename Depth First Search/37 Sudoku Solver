37. Sudoku Solver

```
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        r,c,b = collections.defaultdict(set),collections.defaultdict(set),collections.defaultdict(set)
        visit = []
        
        for i in range(9):
            for j in range(9):
                if board[i][j]!='.':
                    r[i].add(board[i][j])
                    c[j].add(board[i][j])
                    b[(i//3,j//3)].add(board[i][j])
                else:
                    visit.append([i,j])
        
        def dfs():
            if not visit: return True
            [x,y] = visit.pop()
            for val in [str(i) for i in range(1,10)]:
                if val not in r[x] and val not in c[y] and val not in b[(x//3,y//3)]:
                    r[x].add(val)
                    c[y].add(val)
                    b[(x//3,y//3)].add(val)
                    board[x][y] = val
                    if dfs(): return True
                    r[x].discard(val)
                    c[y].discard(val)
                    b[(x//3,y//3)].discard(val)
            visit.append([x,y])
            return False
           
        return dfs()
        
```
