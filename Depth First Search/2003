2003. Smallest Missing Genetic Value in Each Subtree

```
class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        n = len(parents)
        edge = collections.defaultdict(set) # parent: child
        for i,e in enumerate(parents):
            edge[e].add(i)
        #edge.pop(-1)
        
        mi = [-1]*n
        def dfs1(node):
            res = nums[node]
            for nxt in edge[node]:
                res = min(res, dfs1(nxt))
            mi[node] = res
            return res
        
        dfs1(0)
        
        #print(mi)
        
        res = [-1]*n
        # init
        seen = set(nums)
        i = 1
        while i in seen:
            i+= 1
        res[0] = i
        
        def dfs2(node): 
            pre = parents[node]
            if node != 0:
                res[node] = min(res[pre], nums[pre], min([mi[i] for i in edge[pre] if i != node] or [float("inf")]))
            for nxt in edge[node]:
                dfs2(nxt)
            
        dfs2(0)
        return res
```
TLE. dfs twice. First post-order find min values of the subtrees for each node. Then pre-order find results for each node.

```
class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        n = len(parents)
        edge = collections.defaultdict(set) # parent: child
        for i,e in enumerate(parents):
            edge[e].add(i)
        #edge.pop(-1)
        
        mi = [-1]*n
        def dfs1(node):
            res = nums[node]
            for nxt in edge[node]:
                res = min(res, dfs1(nxt))
            mi[node] = res
            return res
        
        dfs1(0)
        
        #print(mi)
        
        res = [-1]*n
        # init
        seen = set(nums)
        i = 1
        while i in seen:
            i+= 1
        res[0] = i
        
        def dfs2(node): 
            pre = parents[node]
            if mi[node] != 1:
                res[node] = 1
            elif node != 0:
                res[node] = min(res[pre], nums[pre], min([mi[i] for i in edge[pre] if i != node] or [float("inf")]))
            for nxt in edge[node]:
                dfs2(nxt)
            
        dfs2(0)
        return res
```
Notice when mi[node] != 1ï¼Œ res[node] can only 1. 
