1483. Kth Ancestor of a Tree Node

You are given a tree with n nodes numbered from 0 to n-1 in the form of a parent array where parent[i] is the parent of node i. The root of the tree is node 0.

Implement the function getKthAncestor(int node, int k) to return the k-th ancestor of the given node. If there is no such ancestor, return -1.

The k-th ancestor of a tree node is the k-th node in the path from that node to the root.

```
# fact: 3rd ancestor = 2nd ancestor (1st ancestor)
# so, find the 1,2,4,8,16... ancestors and sum up to given number k
class TreeAncestor:
    def __init__(self, n: int, parent: List[int]):
        max_step = 15 ## 1<<16 > max_k
        d = {i:e for (i,e) in enumerate(parent)}
        d[-1] = -1
        ancestor = [d]
        for i in range(max_step):
            cur = {i:d[d[i]] for i in d}
            d = cur
            ancestor.append(cur)
        self.a = ancestor
        
    def getKthAncestor(self, node: int, k: int) -> int:
        i = 0
        while k>0:
            if k%2:
                node = self.a[i][node]
            k >>= 1
            i += 1
        return node
```
