## iteratively ##
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return(True)
        
        A = [root.left]
        B = [root.right]
        
        while A or B:
            if A[0] and not B[0]:
                return(False)
            if not A[0] and B[0]:
                return(False)
            if A[0] and B[0]:
                if A[0].val!=B[0].val:
                    return(False)
                else:
                    A.extend([A[0].left,A[0].right])
                    B.extend([B[0].right,B[0].left])
            A.pop(0)
            B.pop(0)
        return(True)        


## recursively ##
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        if not root:
            return(True)
        return(self.isMirror(root.left,root.right))
    
    def isMirror(self,root1,root2):
        if root1==root2:
            return(True)
        if not root1 or not root2:
            return(False)
        if root1.val!=root2.val:
            return(False)
        else:
            return(self.isMirror(root1.left,root2.right) and self.isMirror(root1.right,root2.left))
